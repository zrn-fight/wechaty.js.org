"use strict";(self.webpackChunkwechaty_docusaurus=self.webpackChunkwechaty_docusaurus||[]).push([[9505],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var i=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,r=function(e,t){if(null==e)return{};var n,i,r={},a=Object.keys(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(i=0;i<a.length;i++)n=a[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=i.createContext({}),d=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=d(e.components);return i.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},h=i.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),h=d(n),m=r,u=h["".concat(p,".").concat(m)]||h[m]||s[m]||a;return n?i.createElement(u,o(o({ref:t},c),{},{components:n})):i.createElement(u,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,o=new Array(a);o[0]=h;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var d=2;d<a;d++)o[d]=n[d];return i.createElement.apply(null,o)}return i.createElement.apply(null,n)}h.displayName="MDXCreateElement"},35795:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return l},contentTitle:function(){return p},metadata:function(){return d},toc:function(){return c},default:function(){return h}});var i=n(87462),r=n(63366),a=(n(67294),n(3905)),o=["components"],l={title:"Friendship"},p=void 0,d={unversionedId:"api/friendship",id:"api/friendship",isDocsHomePage:!1,title:"Friendship",description:"Wechaty bot allows you to make friends via its global class called Friendship.This section is completely about the Frienship class.",source:"@site/docs/api/friendship.md",sourceDirName:"api",slug:"/api/friendship",permalink:"/docs/api/friendship",editUrl:"https://github.com/wechaty/wechaty.js.org/edit/main/docusaurus/docs/api/friendship.md",tags:[],version:"current",lastUpdatedBy:"Shraddha",lastUpdatedAt:1631525685,formattedLastUpdatedAt:"9/13/2021",frontMatter:{title:"Friendship"},sidebar:"docs",previous:{title:"Room Invitation",permalink:"/docs/api/room-invitation"},next:{title:"Polyglot: Index",permalink:"/docs/polyglot/"}},c=[{value:"Global class Friendship",id:"global-class-friendship",children:[{value:"Instance Method",id:"instance-method",children:[]},{value:"Static Method",id:"static-method",children:[]},{value:"friendship.accept() \u21d2 <code>Promise &lt;void&gt;</code>",id:"friendshipaccept--promise-void",children:[]},{value:"friendship.hello() \u21d2 <code>string</code>",id:"friendshiphello--string",children:[]},{value:"friendship.contact() \u21d2 <code>Contact</code>",id:"friendshipcontact--contact",children:[]},{value:"friendship.type() \u21d2 <code>FriendshipType</code>",id:"friendshiptype--friendshiptype",children:[]},{value:"Example <em>(If request content is `ding`, then accept the friendship)</em>",id:"example-if-request-content-is-ding-then-accept-the-friendship",children:[]},{value:"Friendship.add(contact, hello) \u21d2 <code>Promise &lt;void&gt;</code>",id:"friendshipaddcontact-hello--promise-void",children:[]}]}],s={toc:c};function h(e){var t=e.components,n=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,i.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Wechaty bot allows you to make friends via its global class called ",(0,a.kt)("inlineCode",{parentName:"p"},"Friendship"),".This section is completely about the ",(0,a.kt)("inlineCode",{parentName:"p"},"Frienship")," class."),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://github.com/wechaty/wechaty/blob/1523c5e02be46ebe2cc172a744b2fbe53351540e/examples/friend-bot.ts"},"Examples or Friend-Bot")),(0,a.kt)("h2",{id:"global-class-friendship"},"Global class Friendship"),(0,a.kt)("p",null,"The Friendship class allows you to do the following functionalities."),(0,a.kt)("ol",null,(0,a.kt)("li",{parentName:"ol"},"send friend requests"),(0,a.kt)("li",{parentName:"ol"},"receive friend requests ","(","in friend event",")"),(0,a.kt)("li",{parentName:"ol"},"confirmation of friendship","("," in friend event",")")),(0,a.kt)("h3",{id:"instance-method"},"Instance Method"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Instance Methods"),(0,a.kt)("th",{parentName:"tr",align:null},"Return Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"accept()"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Promise (void)"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"hello()"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"string"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"contact()"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"contact"))),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"type()"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Frienshiptype"))))),(0,a.kt)("h3",{id:"static-method"},"Static Method"),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:null},"Static Methods"),(0,a.kt)("th",{parentName:"tr",align:null},"Return Type"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:null},"add()"),(0,a.kt)("td",{parentName:"tr",align:null},(0,a.kt)("inlineCode",{parentName:"td"},"Promise (void)"))))),(0,a.kt)("h3",{id:"friendshipaccept--promise-void"},"friendship.accept","(",")"," \u21d2 ",(0,a.kt)("inlineCode",{parentName:"h3"},"Promise <void>")),(0,a.kt)("p",null,"The method accepts friend request.Check the example below for implementation"),(0,a.kt)("h4",{id:"example"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const bot = new Wechaty()\nbot.on('friendship', async friendship => {\n  try {\n    console.log(`received friend event.`)\n    switch (friendship.type()) {\n\n    // 1. New Friend Request\n\n    case bot.Friendship.Type.Receive:\n      await friendship.accept()\n      break\n\n    // 2. Friend Ship Confirmed\n\n    case bot.Friendship.Type.Confirm:\n      console.log(`friend ship confirmed`)\n      break\n    }\n  } catch (e) {\n    console.error(e)\n  }\n})\n.start()\n")),(0,a.kt)("h3",{id:"friendshiphello--string"},"friendship.hello","(",")"," \u21d2 ",(0,a.kt)("inlineCode",{parentName:"h3"},"string")),(0,a.kt)("p",null,"The method verifies message.Check the example below for implementation."),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"Example")," ",(0,a.kt)("em",{parentName:"p"},"(","If request content is ","`","ding","`",", then accept the friendship",")")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const bot = new Wechaty()\nbot.on('friendship', async friendship => {\n  try {\n    console.log(`received friend event from ${friendship.contact().name()}`)\n    if (friendship.type() === bot.Friendship.Type.Receive && friendship.hello() === 'ding') {\n      await friendship.accept()\n    }\n  } catch (e) {\n    console.error(e)\n  }\n}\n.start()\n")),(0,a.kt)("h3",{id:"friendshipcontact--contact"},"friendship.contact","(",")"," \u21d2 ",(0,a.kt)("inlineCode",{parentName:"h3"},"Contact")),(0,a.kt)("p",null,"The method gets the contact from friendship.Below is an example for implementation."),(0,a.kt)("h4",{id:"example-1"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const bot = new Wechaty()\nbot.on('friendship', friendship => {\n  const contact = friendship.contact()\n  const name = contact.name()\n  console.log(`received friend event from ${name}`)\n}\n.start()\n")),(0,a.kt)("h3",{id:"friendshiptype--friendshiptype"},"friendship.type","(",")"," \u21d2 ",(0,a.kt)("inlineCode",{parentName:"h3"},"FriendshipType")),(0,a.kt)("p",null,"The method returns the friendship type.Check the below example for implementation."),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"Tips: FriendshipType is enum here. ","<","/br",">"),(0,a.kt)("ul",{parentName:"blockquote"},(0,a.kt)("li",{parentName:"ul"},"FriendshipType.Unknown"),(0,a.kt)("li",{parentName:"ul"},"FriendshipType.Confirm"),(0,a.kt)("li",{parentName:"ul"},"FriendshipType.Receive"),(0,a.kt)("li",{parentName:"ul"},"FriendshipType.Verify"))),(0,a.kt)("h3",{id:"example-if-request-content-is-ding-then-accept-the-friendship"},"Example ",(0,a.kt)("em",{parentName:"h3"},"(","If request content is ","`","ding","`",", then accept the friendship",")")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const bot = new Wechaty()\nbot.on('friendship', async friendship => {\n  try {\n    if (friendship.type() === bot.Friendship.Type.Receive && friendship.hello() === 'ding') {\n      await friendship.accept()\n    }\n  } catch (e) {\n    console.error(e)\n  }\n}\n.start()\n")),(0,a.kt)("h3",{id:"friendshipaddcontact-hello--promise-void"},"Friendship.add","(","contact, hello",")"," \u21d2 ",(0,a.kt)("inlineCode",{parentName:"h3"},"Promise <void>")),(0,a.kt)("p",null,"The method sends a Friend Request to a ",(0,a.kt)("inlineCode",{parentName:"p"},"contact")," with message ",(0,a.kt)("inlineCode",{parentName:"p"},"hello"),".The best practice is to send friend request once per minute. Remember not to do this too frequently, or your account may be blocked."),(0,a.kt)("table",null,(0,a.kt)("thead",{parentName:"table"},(0,a.kt)("tr",{parentName:"thead"},(0,a.kt)("th",{parentName:"tr",align:"left"},"Param"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Type"),(0,a.kt)("th",{parentName:"tr",align:"left"},"Description"))),(0,a.kt)("tbody",{parentName:"table"},(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"contact"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"Contact")),(0,a.kt)("td",{parentName:"tr",align:"left"},"Send friend request to contact")),(0,a.kt)("tr",{parentName:"tbody"},(0,a.kt)("td",{parentName:"tr",align:"left"},"hello"),(0,a.kt)("td",{parentName:"tr",align:"left"},(0,a.kt)("inlineCode",{parentName:"td"},"string")),(0,a.kt)("td",{parentName:"tr",align:"left"},"The friend request content")))),(0,a.kt)("h4",{id:"example-2"},"Example"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"const memberList = await room.memberList()\nfor (let i = 0; i < memberList.length; i++) {\n  await bot.Friendship.add(member, 'Nice to meet you! I am wechaty bot!')\n}\n")))}h.isMDXComponent=!0}}]);